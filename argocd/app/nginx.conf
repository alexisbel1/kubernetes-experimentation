user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    # include       /etc/nginx/mime.types;
    # default_type  application/octet-stream;
    # geoip_country /etc/nginx/GeoIP.dat;
    # geoip_city /etc/nginx/GeoIPCity.dat;
    log_format json_analytics escape=json '{'
                            '"msec": "$msec", ' # request unixtime in seconds with a milliseconds resolution
                            '"connection": "$connection", ' # connection serial number
                            '"connection_requests": "$connection_requests", ' # number of requests made in connection
                    '"pid": "$pid", ' # process pid
                    '"request_id": "$request_id", ' # the unique request id
                    '"request_length": "$request_length", ' # request length (including headers and body)
                    '"remote_addr": "$remote_addr", ' # client IP
                    '"remote_user": "$remote_user", ' # client HTTP username
                    '"remote_port": "$remote_port", ' # client port
                    '"time_local": "$time_local", '
                    '"time_iso8601": "$time_iso8601", ' # local time in the ISO 8601 standard format
                    '"request": "$request", ' # full path no arguments if the request
                    '"request_uri": "$request_uri", ' # full path and arguments if the request
                    '"args": "$args", ' # args
                    '"status": "$status", ' # response status code
                    '"body_bytes_sent": "$body_bytes_sent", ' # the number of body bytes exclude headers sent to a client
                    '"bytes_sent": "$bytes_sent", ' # the number of bytes sent to a client
                    '"http_referer": "$http_referer", ' # HTTP referer
                    '"http_user_agent": "$http_user_agent", ' # user agent
                    '"http_x_forwarded_for": "$http_x_forwarded_for", ' # http_x_forwarded_for
                    '"http_host": "$http_host", ' # the request Host: header
                    '"server_name": "$server_name", ' # the name of the vhost serving the request
                    '"request_time": "$request_time", ' # request processing time in seconds with msec resolution
                    '"upstream": "$upstream_addr", ' # upstream backend server for proxied requests
                    '"upstream_connect_time": "$upstream_connect_time", ' # upstream handshake time incl. TLS
                    '"upstream_header_time": "$upstream_header_time", ' # time spent receiving upstream headers
                    '"upstream_response_time": "$upstream_response_time", ' # time spend receiving upstream body
                    '"upstream_response_length": "$upstream_response_length", ' # upstream response length
                    '"upstream_cache_status": "$upstream_cache_status", ' # cache HIT/MISS where applicable
                    '"ssl_protocol": "$ssl_protocol", ' # TLS protocol
                    '"ssl_cipher": "$ssl_cipher", ' # TLS cipher
                    '"scheme": "$scheme", ' # http or https
                    '"request_method": "$request_method", ' # request method
                    '"server_protocol": "$server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
                    '"pipe": "$pipe", ' # "p" if request was pipelined, "." otherwise
                    '"gzip_ratio": "$gzip_ratio", '
                    '"http_cf_ray": "$http_cf_ray",'
                    # '"geoip_country_code": "$geoip_country_code"'
                    '}';

     access_log /var/log/nginx/json_access.log json_analytics;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;
}
# user       nginx;  ## Default: nobody
# worker_processes  auto;  ## Default: 1
# error_log  logs/error.log;
# pid        logs/nginx.pid;
# worker_rlimit_nofile 8192;

# events {
#   worker_connections  4096;  ## Default: 1024
# }

# http {
#   include    conf/mime.types;
# #   include    /etc/nginx/proxy.conf;
#   include    /etc/nginx/fastcgi.conf;
#   index    index.html index.htm index.php;
#   geoip_country /etc/nginx/GeoIP.dat;
#   geoip_city /etc/nginx/GeoIPCity.dat;
#   log_format json_analytics escape=json '{'
#                             '"msec": "$msec", ' # request unixtime in seconds with a milliseconds resolution
#                             '"connection": "$connection", ' # connection serial number
#                             '"connection_requests": "$connection_requests", ' # number of requests made in connection
#                     '"pid": "$pid", ' # process pid
#                     '"request_id": "$request_id", ' # the unique request id
#                     '"request_length": "$request_length", ' # request length (including headers and body)
#                     '"remote_addr": "$remote_addr", ' # client IP
#                     '"remote_user": "$remote_user", ' # client HTTP username
#                     '"remote_port": "$remote_port", ' # client port
#                     '"time_local": "$time_local", '
#                     '"time_iso8601": "$time_iso8601", ' # local time in the ISO 8601 standard format
#                     '"request": "$request", ' # full path no arguments if the request
#                     '"request_uri": "$request_uri", ' # full path and arguments if the request
#                     '"args": "$args", ' # args
#                     '"status": "$status", ' # response status code
#                     '"body_bytes_sent": "$body_bytes_sent", ' # the number of body bytes exclude headers sent to a client
#                     '"bytes_sent": "$bytes_sent", ' # the number of bytes sent to a client
#                     '"http_referer": "$http_referer", ' # HTTP referer
#                     '"http_user_agent": "$http_user_agent", ' # user agent
#                     '"http_x_forwarded_for": "$http_x_forwarded_for", ' # http_x_forwarded_for
#                     '"http_host": "$http_host", ' # the request Host: header
#                     '"server_name": "$server_name", ' # the name of the vhost serving the request
#                     '"request_time": "$request_time", ' # request processing time in seconds with msec resolution
#                     '"upstream": "$upstream_addr", ' # upstream backend server for proxied requests
#                     '"upstream_connect_time": "$upstream_connect_time", ' # upstream handshake time incl. TLS
#                     '"upstream_header_time": "$upstream_header_time", ' # time spent receiving upstream headers
#                     '"upstream_response_time": "$upstream_response_time", ' # time spend receiving upstream body
#                     '"upstream_response_length": "$upstream_response_length", ' # upstream response length
#                     '"upstream_cache_status": "$upstream_cache_status", ' # cache HIT/MISS where applicable
#                     '"ssl_protocol": "$ssl_protocol", ' # TLS protocol
#                     '"ssl_cipher": "$ssl_cipher", ' # TLS cipher
#                     '"scheme": "$scheme", ' # http or https
#                     '"request_method": "$request_method", ' # request method
#                     '"server_protocol": "$server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
#                     '"pipe": "$pipe", ' # "p" if request was pipelined, "." otherwise
#                     '"gzip_ratio": "$gzip_ratio", '
#                     '"http_cf_ray": "$http_cf_ray",'
#                     '"geoip_country_code": "$geoip_country_code"'
#                     '}';

#   access_log /var/log/nginx/json_access.log json_analytics;
#   default_type application/octet-stream;
#   sendfile     on;
#   tcp_nopush   on;
#   server_names_hash_bucket_size 128; # this seems to be required for some vhosts

#   server { # php/fastcgi
#     listen       80;
#     server_name  domain1.com www.domain1.com;
#     access_log   logs/domain1.access.log  main;
#     root         html;

#     location ~ \.php$ {
#       fastcgi_pass   127.0.0.1:1025;
#     }
#   }

#   server { # simple reverse-proxy
#     listen       80;
#     server_name  domain2.com www.domain2.com;
#     access_log   logs/domain2.access.log  main;

#     # serve static files
#     location ~ ^/(images|javascript|js|css|flash|media|static)/  {
#       root    /var/www/virtual/big.server.com/htdocs;
#       expires 30d;
#     }

#     # pass requests for dynamic content to rails/turbogears/zope, et al
#     location / {
#       proxy_pass      http://127.0.0.1:8080;
#     }
#   }

#   upstream big_server_com {
#     server 127.0.0.3:8000 weight=5;
#     server 127.0.0.3:8001 weight=5;
#     server 192.168.0.1:8000;
#     server 192.168.0.1:8001;
#   }

#   server { # simple load balancing
#     listen          80;
#     server_name     big.server.com;
#     access_log      logs/big.server.access.log main;

#     location / {
#       proxy_pass      http://big_server_com;
#     }
#   }
# }